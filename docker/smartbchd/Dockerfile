FROM ubuntu:20.04

MAINTAINER Josh Ellithorpe <quest@mac.com>

ARG SMARTBCH_VERSION="0.3.4"
ARG MOEINGEVM_VERSION="0.3.2"
ARG CONFIG_VERSION="0.0.3"

ARG GOLANG_VERSION="1.16.5"
ARG PATCH_CGO_VERSION="0.1.1"
ARG ROCKSDB_VERSION="5.18.4"
ARG SNAPPY_VERSION="1.1.8"

ENV DEBIAN_FRONTEND="noninteractive"
ENV GOROOT=/usr/local/go
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/lib
ENV CGO_CFLAGS="-I/$LD_LIBRARY_PATH/include"
ENV CGO_LDFLAGS="-L/$LD_LIBRARY_PATH -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd"
ENV EVMWRAP=/build/libevmwrap.so

RUN set -ex && \
    # Update file limit
    sed -i -e '$a* soft nofile 65536\n* hard nofile 65536' /etc/security/limits.conf && \
    # Install apt based dependencies
    apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install cmake gcc-8 g++-8 gcc g++ git libgflags-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev make wget && \
    # Setup build directory
    mkdir /build && \
    # Install Go
    cd /build && \
    wget https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz && \
    tar zxvf go${GOLANG_VERSION}.linux-amd64.tar.gz -C /usr/local && \
    mkdir -p $GOPATH/bin && \
    # Patch Go for larger cgo stack size
    wget https://github.com/smartbch/patch-cgo-for-golang/archive/refs/tags/v${PATCH_CGO_VERSION}.tar.gz && \
    tar zxvf v${PATCH_CGO_VERSION}.tar.gz -C $GOROOT/src/runtime/cgo/ --strip-components=1 --wildcards "*.c" && \
    # Build libsnappy
    cd /build && \
    wget https://github.com/google/snappy/archive/refs/tags/${SNAPPY_VERSION}.tar.gz && \
    mkdir -p snappy/build && tar zxvf ${SNAPPY_VERSION}.tar.gz -C snappy --strip-components=1 && \
    cd snappy/build && cmake -DBUILD_SHARED_LIBS=On -DSNAPPY_BUILD_TESTS=0 -DCMAKE_BUILD_TYPE=Release ../ && make -j4 install && \
    # Build rocksdb
    cd /build && \
    wget https://github.com/facebook/rocksdb/archive/refs/tags/v${ROCKSDB_VERSION}.tar.gz && \
    mkdir rocksdb && tar zxvf v${ROCKSDB_VERSION}.tar.gz -C rocksdb --strip-components=1 && \
    cd rocksdb && PORTABLE=1 DEBUG_LEVEL=0 make -j`nproc` CC=gcc-8 CXX=g++-8 EXTRA_CXXFLAGS=-s shared_lib install-shared && \
    # Remove build artifacts
    rm -rf /build/* && \
    # Build libevmwrap.so
    cd /build && \
    git clone -b v${MOEINGEVM_VERSION} --depth 1 https://github.com/smartbch/moeingevm && \
    cd moeingevm/evmwrap && make -j`nproc` && \
    cp host_bridge/libevmwrap.so /build && \
    rm -rf /build/moeingevm/ && \
    # Build smartbchd
    cd /build && \
    git clone -b v${SMARTBCH_VERSION} --depth 1 https://github.com/smartbch/smartbch && \
    cd smartbch && go build -tags cppbtree github.com/smartbch/smartbch/cmd/smartbchd && \
    cp smartbchd /build && \
    rm -rf /build/smartbch/ && \
    # Init chain
    cd /root && \
    /build/smartbchd init mynode --chain-id 0x2710 && \
    wget https://github.com/smartbch/artifacts/releases/download/v${CONFIG_VERSION}/dot.smartbchd.tgz && \
    tar zxvf dot.smartbchd.tgz -C .smartbchd/ --strip-components=1 && \
    rm dot.smartbchd.tgz && \
    # Remove compiler dependencies and clean up cache
    rm -rf $GOROOT $GOPATH /root/.cache && \
    apt-get -y remove cmake gcc-8 g++-8 gcc g++ git make wget && \
    apt-get -y --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Go back to main workdir.
WORKDIR /build

VOLUME ["/root/.smartbchd"]

ENTRYPOINT ["./smartbchd"]
EXPOSE 8545 8546
